plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
   // accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    // Add repositories to retrieve artifacts from in here.
    // You should only use this when depending on other mods because
    // Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
    // See https://docs.gradle.org/current/userguide/declaring_repositories.html
    // for more information about repositories.
    maven {
        name "KosmX's maven"
        url 'https://maven.kosmx.dev/'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        //forRepositories(fg.repository) // Only add this if you're using ForgeGradle, otherwise remove this line
        filter {
            includeGroup "maven.modrinth"
        }
    }
    maven { url 'https://api.modrinth.com/maven' }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases/" }
    maven { url "https://maven.blamejared.com/" }
    maven { url "https://cursemaven.com" }
    maven {url 'https://libs.azuredoom.com:4443/mods'}






}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"


    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_version}"

    modImplementation("dev.kosmx.player-anim:player-animation-lib-fabric:${project.player_anim}")

    modApi("me.shedaniel.cloth:cloth-config-fabric:12.0.119") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    modCompileOnly("com.terraformersmc:modmenu:${project.mod_menu_version}") { transitive false }

    modCompileOnly("tschipp.carryon:carryon-fabric-1.20.1:2.1.2.7" ) { transitive false }

    modCompileOnly("maven.modrinth:not-enough-animations:1.7.1-fabric,1.20.4")

    modCompileOnly("maven.modrinth:immersive-melodies:0.1.0+1.20.1-fabric,1.20.1")

    modCompileOnly("maven.modrinth:sword-blocking:1.3.1-fabric,1.20.1")

    modCompileOnly("maven.modrinth:oldcombatmod:0.1.2+1.20.4-fabric,1.20.4")

    modCompileOnly("maven.modrinth:trigger-happy:1.0.4-fabric,1.20.1")

    modCompileOnly("curse.maven:supplementaries-412082:5154524") { transitive false }

    modCompileOnly("mod.azure.azurelib:azurelib-fabric-1.20.4:2.1.6") { transitive false }

    modCompileOnly("curse.maven:ewewukeks-musket-mod-354562:5138146") { transitive false }

    modCompileOnly("curse.maven:absolute-ultracraft-861094:4920081") { transitive false }

    modCompileOnly("curse.maven:happiness-is-a-warm-gun-448106:5195355") { transitive false }

    modCompileOnly("curse.maven:fabric-simple-animated-guns-664917:4746617") { transitive false }




}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

